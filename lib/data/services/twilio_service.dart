import '../services/http_service.dart';

class TwilioService {
  // Enviar c√≥digo de verificaci√≥n usando el backend
  static Future<Map<String, dynamic>> sendVerificationCode(String phoneNumber) async {
    try {
      print('üì± TwilioService.sendVerificationCode() - Enviando c√≥digo a: $phoneNumber');
      
      final response = await HttpService.post('/twilio/send-code', {
        'phoneNumber': phoneNumber,
      });

      print('‚úÖ TwilioService.sendVerificationCode() - C√≥digo enviado exitosamente');
      return {
        'success': true,
        'message': 'C√≥digo de verificaci√≥n enviado',
        'data': response['data'],
      };
    } catch (e) {
      print('‚ùå TwilioService.sendVerificationCode() - Error: $e');
      return {
        'success': false,
        'message': 'Error al enviar c√≥digo de verificaci√≥n',
        'error': e.toString(),
      };
    }
  }

  // Verificar c√≥digo usando el backend
  static Future<Map<String, dynamic>> verifyCode(String phoneNumber, String code) async {
    try {
      print('üì± TwilioService.verifyCode() - Verificando c√≥digo para: $phoneNumber');
      
      final response = await HttpService.post('/twilio/verify-code', {
        'phoneNumber': phoneNumber,
        'code': code,
      });

      print('‚úÖ TwilioService.verifyCode() - C√≥digo verificado exitosamente');
      return {
        'success': true,
        'message': 'N√∫mero verificado correctamente',
        'data': response['data'],
      };
    } catch (e) {
      print('‚ùå TwilioService.verifyCode() - Error: $e');
      return {
        'success': false,
        'message': 'Error al verificar c√≥digo',
        'error': e.toString(),
      };
    }
  }

  // Formatear n√∫mero de tel√©fono para Twilio (agregar c√≥digo de pa√≠s si no est√° presente)
  static String formatPhoneNumber(String phoneNumber) {
    // Si el n√∫mero no empieza con +, agregar c√≥digo de pa√≠s por defecto
    if (!phoneNumber.startsWith('+')) {
      // Remover espacios, guiones y par√©ntesis
      final cleanNumber = phoneNumber.replaceAll(RegExp(r'[\s\-\(\)]'), '');
      
      // Si empieza con 0, removerlo
      if (cleanNumber.startsWith('0')) {
        return '+52${cleanNumber.substring(1)}';
      }
      
      // Si empieza con 1, agregar c√≥digo de pa√≠s
      if (cleanNumber.startsWith('1')) {
        return '+52$cleanNumber';
      }
      
      // Si tiene 10 d√≠gitos, agregar c√≥digo de pa√≠s
      if (cleanNumber.length == 10) {
        return '+52$cleanNumber';
      }
      
      // Si ya tiene c√≥digo de pa√≠s, solo agregar +
      if (cleanNumber.length > 10) {
        return '+$cleanNumber';
      }
    }
    
    return phoneNumber;
  }

  // Validar formato de n√∫mero de tel√©fono
  static bool isValidPhoneNumber(String phoneNumber) {
    // Remover espacios, guiones y par√©ntesis
    final cleanNumber = phoneNumber.replaceAll(RegExp(r'[\s\-\(\)]'), '');
    
    // Validar que tenga al menos 10 d√≠gitos
    final digitsOnly = cleanNumber.replaceAll(RegExp(r'[^\d]'), '');
    return digitsOnly.length >= 10;
  }
} 