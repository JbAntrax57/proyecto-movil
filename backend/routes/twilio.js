const express = require('express');
const axios = require('axios');
const crypto = require('crypto');

const router = express.Router();

// Configuraci√≥n de Twilio
const TWILIO_CONFIG = {
  accountSid: process.env.TWILIO_ACCOUNT_SID,
  authToken: process.env.TWILIO_AUTH_TOKEN,
  serviceSid: process.env.TWILIO_SERVICE_SID,
  baseUrl: 'https://verify.twilio.com/v2/Services',
};

// Verificar que las credenciales est√©n configuradas
if (!TWILIO_CONFIG.accountSid || !TWILIO_CONFIG.authToken || !TWILIO_CONFIG.serviceSid) {
  console.error('‚ùå Error: Credenciales de Twilio no configuradas en variables de entorno');
  console.error('Configura: TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_SERVICE_SID');
}

// Funci√≥n para generar c√≥digo aleatorio de 6 d√≠gitos
function generateRandomCode() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// Funci√≥n para formatear n√∫mero de tel√©fono
function formatPhoneNumber(phoneNumber) {
  // Si el n√∫mero no empieza con +, agregar c√≥digo de pa√≠s por defecto
  if (!phoneNumber.startsWith('+')) {
    const cleanNumber = phoneNumber.replace(/[\s\-\(\)]/g, '');
    
    // Si empieza con 0, removerlo
    if (cleanNumber.startsWith('0')) {
      return `+52${cleanNumber.substring(1)}`;
    }
    
    // Si empieza con 1, agregar c√≥digo de pa√≠s
    if (cleanNumber.startsWith('1')) {
      return `+52${cleanNumber}`;
    }
    
    // Si tiene 10 d√≠gitos, agregar c√≥digo de pa√≠s
    if (cleanNumber.length === 10) {
      return `+52${cleanNumber}`;
    }
    
    // Si ya tiene c√≥digo de pa√≠s, solo agregar +
    if (cleanNumber.length > 10) {
      return `+${cleanNumber}`;
    }
  }
  
  return phoneNumber;
}

// Funci√≥n para validar formato de n√∫mero de tel√©fono
function isValidPhoneNumber(phoneNumber) {
  const cleanNumber = phoneNumber.replace(/[\s\-\(\)]/g, '');
  const digitsOnly = cleanNumber.replace(/\D/g, '');
  return digitsOnly.length >= 10;
}

// POST /api/twilio/send-code - Enviar c√≥digo de verificaci√≥n
router.post('/send-code', async (req, res) => {
  try {
    const { phoneNumber } = req.body;

    if (!phoneNumber) {
      return res.status(400).json({
        error: 'N√∫mero de tel√©fono requerido',
        message: 'Debe proporcionar un n√∫mero de tel√©fono'
      });
    }

    if (!isValidPhoneNumber(phoneNumber)) {
      return res.status(400).json({
        error: 'N√∫mero de tel√©fono inv√°lido',
        message: 'El formato del n√∫mero de tel√©fono no es v√°lido'
      });
    }

    const formattedPhone = formatPhoneNumber(phoneNumber);
    const customCode = generateRandomCode();

    console.log('üì± POST /api/twilio/send-code - Enviando c√≥digo a:', formattedPhone);

    const response = await axios.post(
      `${TWILIO_CONFIG.baseUrl}/${TWILIO_CONFIG.serviceSid}/Verifications`,
      {
        To: formattedPhone,
        Channel: 'sms',
      },
      {
        headers: {
          'Authorization': `Basic ${Buffer.from(`${TWILIO_CONFIG.accountSid}:${TWILIO_CONFIG.authToken}`).toString('base64')}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        transformRequest: (data) => {
          return Object.keys(data)
            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`)
            .join('&');
        },
      }
    );

    console.log('‚úÖ POST /api/twilio/send-code - C√≥digo enviado exitosamente');

    res.json({
      success: true,
      message: 'C√≥digo de verificaci√≥n enviado',
      data: {
        phoneNumber: formattedPhone,
        status: response.data.status,
      }
    });

  } catch (error) {
    console.error('‚ùå Error enviando c√≥digo de verificaci√≥n:', error.response?.data || error.message);
    
    res.status(500).json({
      error: 'Error al enviar c√≥digo',
      message: 'No se pudo enviar el c√≥digo de verificaci√≥n',
      details: error.response?.data || error.message
    });
  }
});

// POST /api/twilio/verify-code - Verificar c√≥digo
router.post('/verify-code', async (req, res) => {
  try {
    const { phoneNumber, code } = req.body;

    if (!phoneNumber || !code) {
      return res.status(400).json({
        error: 'Datos incompletos',
        message: 'N√∫mero de tel√©fono y c√≥digo son requeridos'
      });
    }

    const formattedPhone = formatPhoneNumber(phoneNumber);

    console.log('üì± POST /api/twilio/verify-code - Verificando c√≥digo para:', formattedPhone);

    const response = await axios.post(
      `${TWILIO_CONFIG.baseUrl}/${TWILIO_CONFIG.serviceSid}/VerificationCheck`,
      {
        To: formattedPhone,
        Code: code,
      },
      {
        headers: {
          'Authorization': `Basic ${Buffer.from(`${TWILIO_CONFIG.accountSid}:${TWILIO_CONFIG.authToken}`).toString('base64')}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        transformRequest: (data) => {
          return Object.keys(data)
            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`)
            .join('&');
        },
      }
    );

    if (response.data.status === 'approved') {
      console.log('‚úÖ POST /api/twilio/verify-code - C√≥digo verificado exitosamente');
      
      res.json({
        success: true,
        message: 'N√∫mero verificado correctamente',
        data: {
          phoneNumber: formattedPhone,
          status: response.data.status,
        }
      });
    } else {
      console.log('‚ùå POST /api/twilio/verify-code - C√≥digo incorrecto');
      
      res.status(400).json({
        error: 'C√≥digo incorrecto',
        message: 'El c√≥digo de verificaci√≥n no es v√°lido',
        data: {
          status: response.data.status,
        }
      });
    }

  } catch (error) {
    console.error('‚ùå Error verificando c√≥digo:', error.response?.data || error.message);
    
    res.status(500).json({
      error: 'Error al verificar c√≥digo',
      message: 'No se pudo verificar el c√≥digo',
      details: error.response?.data || error.message
    });
  }
});

module.exports = router; 